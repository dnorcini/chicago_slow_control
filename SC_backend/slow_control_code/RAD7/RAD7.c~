/* Program for reading RAD7 radon counter */
/* and putting said readings in to a mysql database. */
/* defined below. */
/* D.Norcini, UChicago, 2022*/

#include "SC_db_interface.h"
#include "SC_aux_fns.h"
#include "SC_sensor_interface.h"

#include "ethernet.h"

// This is the default instrument entry, but can be changed on the command line when run manually.
// When called with the watchdog, a specific instrument is always given even if it is the same
// as the default. 
#define INSTNAME "RAD7"

int inst_dev;

#define _def_set_up_inst
int set_up_inst(struct inst_struct *i_s, struct sensor_struct *s_s_a)    
{
  char cmd_string[64];

  if ((inst_dev = connect_tcp(i_s)) < 0)
    {
      fprintf(stderr, "Connect failed. \n");
      my_signal = SIGTERM;
      return(1);
    }

  
  return(0);
}

#define _def_clean_up_inst
void clean_up_inst(struct inst_struct *i_s, struct sensor_struct *s_s_a)
{
  close(inst_dev);
}

#define _def_read_sensor
int read_sensor(struct inst_struct *i_s, struct sensor_struct *s_s, double *val_out)
{
  char       cmd_string[200];
  char       ret_string[200];
  double ret_val;

  //read out full return string for each run and then parse
  sprintf(cmd_string, "Special ComAll\r"); //download all runs
  query_tcp(inst_dev, cmd_string, strlen(cmd_string), ret_string, sizeof(ret_string)/sizeof(char));
  msleep(200);
  query_tcp(inst_dev, cmd_string, strlen(cmd_string), ret_string, sizeof(ret_string)/sizeof(char));
  fprintf(stdout, "Return string: \"%s\"\n", ret_string);
  
  if (strncmp(s_s->subtype, "run", 3) == 0)  // Read out value for temp sensor
   {	      
      // parse
      int data_length = ret_string[0]-ret_string[1];
      memmove(&ret_string[0], &ret_string[2], sizeof(ret_string)-data_length);

      if(sscanf(ret_string, "%lf", val_out) != 1)
	{
	  fprintf(stderr, "Bad return string: \"%s\" in read temperature!\n", ret_string);
	  return(1);
	}	
    }
   
  else if (strncmp(s_s->subtype, "pwout", 1) == 0)  // Read out value for power (by controller)
    {
      sprintf(cmd_string, "P\r");
      query_tcp(inst_dev, cmd_string, strlen(cmd_string), ret_string, sizeof(ret_string)/sizeof(char));
      msleep(200);
      query_tcp(inst_dev, cmd_string, strlen(cmd_string), ret_string, sizeof(ret_string)/sizeof(char));

      // output in P\n<power>
      int data_length = ret_string[0]-ret_string[0];
      memmove(&ret_string[0], &ret_string[1], sizeof(ret_string)-data_length);
      
      if(sscanf(ret_string, "%lf", val_out) != 1)
	{
	  fprintf(stderr, "Bad return string: \"%s\" in read temperature!\n", ret_string);
	  return(1);
	}
    }

    
  else       // Print an error if invalid subtype is entered
    {
      fprintf(stderr, "Wrong type for %s \n", s_s->name);
      return(1);
    } 
  msleep(600);

  return(0);
}

// settings/serial parameters selected on instrument, should not be changed
#define _def_set_sensor
int set_sensor(struct inst_struct *i_s, struct sensor_struct *s_s)
{
  char       cmd_string[64];
  char       ret_string[64];
  double     ret_val;

  return(0);
}

#include "main.h"
